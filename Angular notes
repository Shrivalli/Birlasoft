Ref Links:https://www.turing.com/kb/9-ways-to-pass-through-angular-routerstate
Angular - client side javascript framework (base class libraries (node js modules)

Angular helps us to create SPA ( Single Page Application)

Node -node.js - node -v is used to check whether node is installed
node package manager - install 3rd party  
npm -v - to check the version of npm

To install angular - npm install -g @angular/cli
ng version - to check the version of angular


To create an angular project
ng new <prjname>

Angular routing? - press y
Stylesheet css - press enter

Folder structure:

1. node_modules - predefined packages
2. app - component  - building blocks of angular project
3. assets - wwwroot (static files/ images)
4. environments - production / dev environment
5. index.html - SPA(this is the only html file in your entire project)

Typescript - strongly typed language (OOPS) - extension - .ts

Component:
Every component will have 4 files

1.html - view 
2. ts - logic 
3. css- stylesheet 
4. spec.ts - unit testing file (jasmine and karma)

app.module.ts - program.cs (kickstarted into this module.ts file)

To execute the angular applications - cmd prompt - navigate within the project folder

ng serve - the project will get hosted in the port number 4200

Data Binding in Angular:
1. one way - the variables declared in ts to be displayed in html - {{variablename}}  --> Interpolation
2. Two way Binding - [(ngModel)] - FormsModule(import this namespace in app.module.ts)
3. Property Binding - Eg: <img [src]="variablename" height="100" width="100"/>
4. Event Binding - Eg: () Define a method in ts and associate the method with the click event of the button

Angular Routing:
1. routing.module.ts - Create a path for the component in the routing module.ts
const routes: Routes = [
  {path:'login',component:LoginComponent},
  {path:'cal',component:CalculateComponent}
];
2. In the home page create routerlink for the components
<a routerLink="path"> HyperText </a>
3. <router-outlet> </router-outlet>

Inbuilt pipes:
1. Date
2. uppercase
3. Currency


Models:
Interface/Class
student.ts
export interface Student
{
    sid:number;
    sname:string;
    marks:number;
    DOB:Date;
}

StudentList.ts
export class StudentlistComponent implements OnInit {
s:Student;
students:Student[]=[
  {sid:101,sname:"Vandhana",marks:90,DOB:new Date('4/3/2020')},
  {sid:102,sname:"Sadha",marks:50,DOB:new Date('2/3/2022')},
  {sid:103,sname:"Radha",marks:70,DOB:new Date('5/3/2023')}
];
  constructor() {
    this.s={sid:0,sname:"",marks:0,DOB:new Date('1/1/0001')};
   }

StudetnList.html
<p>studentlist works!</p>
<table class="table">
<tr *ngFor="let s1 of students">
<td>{{s1.sid}}</td>
<td>{{s1.sname|uppercase}}</td>
<td>{{s1.marks}}</td>
<td>{{s1.DOB|date}}</td>
</tr>
</table>


Service: - ts and spec.ts (will not have UI)(html + css will not be there for service)
used to pass data across components

create a service
ng g s student
















